/*
 * Haplotype Frequency Curation Service
 * Allows to store and return haplotype frequency data
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ResolutionInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-10-12T09:58:25.177-07:00")
public class ResolutionInfo {
  @SerializedName("scopeElement")
  private String scopeElement = null;

  /**
   * resolution of the data
   */
  @JsonAdapter(ResolutionEnum.Adapter.class)
  public enum ResolutionEnum {
    G("G"),
    
    P("P"),
    
    GNMDP("gNMDP"),
    
    GDKMS("gDKMS"),
    
    _1_FIELD("1-Field"),
    
    _2_FIELD("2-Field"),
    
    _3_FIELD("3-Field"),
    
    _4_FIELD("4-Field"),
    
    SEROLOGY("Serology");

    private String value;

    ResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResolutionEnum fromValue(String text) {
      for (ResolutionEnum b : ResolutionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResolutionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("resolution")
  private ResolutionEnum resolution = null;

  public ResolutionInfo scopeElement(String scopeElement) {
    this.scopeElement = scopeElement;
    return this;
  }

   /**
   * Get scopeElement
   * @return scopeElement
  **/
  @ApiModelProperty(value = "")
  public String getScopeElement() {
    return scopeElement;
  }

  public void setScopeElement(String scopeElement) {
    this.scopeElement = scopeElement;
  }

  public ResolutionInfo resolution(ResolutionEnum resolution) {
    this.resolution = resolution;
    return this;
  }

   /**
   * resolution of the data
   * @return resolution
  **/
  @ApiModelProperty(value = "resolution of the data")
  public ResolutionEnum getResolution() {
    return resolution;
  }

  public void setResolution(ResolutionEnum resolution) {
    this.resolution = resolution;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResolutionInfo resolutionInfo = (ResolutionInfo) o;
    return Objects.equals(this.scopeElement, resolutionInfo.scopeElement) &&
        Objects.equals(this.resolution, resolutionInfo.resolution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scopeElement, resolution);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResolutionInfo {\n");
    
    sb.append("    scopeElement: ").append(toIndentedString(scopeElement)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

