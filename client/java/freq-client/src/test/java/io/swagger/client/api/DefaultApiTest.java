/*
 * Haplotype Frequency Curation Service
 * Allows to store and return haplotype frequency data
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CohortData;
import io.swagger.client.model.Error;
import io.swagger.client.model.HFCurationListResponse;
import io.swagger.client.model.HFCurationRequest;
import io.swagger.client.model.HFCurationResponse;
import io.swagger.client.model.HaplotypeFrequencyData;
import io.swagger.client.model.LabelData;
import io.swagger.client.model.LabelResponse;
import io.swagger.client.model.PopulationData;
import io.swagger.client.model.PopulationResponse;
import io.swagger.client.model.PopulationSubmissionResponse;
import io.swagger.client.model.ScopeData;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * Gets a list of all submission data sets 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hfcGetTest() throws ApiException {
        HFCurationListResponse response = api.hfcGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of all labels
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hfcLabelGetTest() throws ApiException {
        LabelResponse response = api.hfcLabelGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of all populations 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hfcPopulationGetTest() throws ApiException {
        PopulationResponse response = api.hfcPopulationGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a population with its attached submissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hfcPopulationPopulationIdGetTest() throws ApiException {
        Long populationId = null;
        PopulationSubmissionResponse response = api.hfcPopulationPopulationIdGet(populationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Storing of a new Haplotype Frequency set. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hfcPostTest() throws ApiException {
        HFCurationRequest hfCurationRequest = null;
        HFCurationResponse response = api.hfcPost(hfCurationRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the list of haplotypes attached to the given submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hfcSubmissionIdCohortGetTest() throws ApiException {
        Long submissionId = null;
        CohortData response = api.hfcSubmissionIdCohortGet(submissionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete based on submissionId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hfcSubmissionIdDeleteTest() throws ApiException {
        Long submissionId = null;
        api.hfcSubmissionIdDelete(submissionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a submission of haplotypes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hfcSubmissionIdGetTest() throws ApiException {
        Long submissionId = null;
        HFCurationResponse response = api.hfcSubmissionIdGet(submissionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the list of haplotypes attached to the given submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hfcSubmissionIdHaplotypesGetTest() throws ApiException {
        Long submissionId = null;
        HaplotypeFrequencyData response = api.hfcSubmissionIdHaplotypesGet(submissionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the labels associated to the submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hfcSubmissionIdLabelsGetTest() throws ApiException {
        Long submissionId = null;
        LabelData response = api.hfcSubmissionIdLabelsGet(submissionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the population of the given submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hfcSubmissionIdPopulationGetTest() throws ApiException {
        Long submissionId = null;
        PopulationData response = api.hfcSubmissionIdPopulationGet(submissionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the scope of the genotypes used for creating the submitted haplotypes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hfcSubmissionIdScopeGetTest() throws ApiException {
        Long submissionId = null;
        ScopeData response = api.hfcSubmissionIdScopeGet(submissionId);

        // TODO: test validations
    }
    
}
